@using Todos.Orchestrator.TodoItems.Commands
@using Todos.Orchestrator.TodoItems.Models
@using Todos.Web.Services

<MudDrawer Open="IsDrawerOpen" OpenChanged="_ => IsDrawerOpenChanged.InvokeAsync(_)" Anchor="Anchor.End" Elevation="25" Variant="@DrawerVariant.Temporary" Width="50vw"
           ClipMode="DrawerClipMode.Always" PreserveOpenState="true">
    <MudDrawerHeader Class="mb-0 pb-0" Style="align-items:center;">
        <MudText Typo="Typo.h5" Color="Color.Primary">Update todo item status</MudText>
    </MudDrawerHeader>
    <MudContainer>
        <EditForm Model="_command" OnValidSubmit="Save">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="TodoItemStatus" Label="Status" AnchorOrigin="Origin.BottomCenter" @bind-Value="_command.Status" For="@(() => _command.Status)" >
                        <MudSelectItem T="TodoItemStatus" Value="0">Please select</MudSelectItem>
                        @foreach (TodoItemStatus documentType in Enum.GetValues(typeof(TodoItemStatus)))
                        {
                            <MudSelectItem T="TodoItemStatus" Value="documentType" />
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudToolBar Class="mt-4 px-0">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Close" Color="Color.Error" OnClick="Close">Close</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Save" Color="Color.Primary" Disabled="_isSaving" ButtonType="ButtonType.Submit">Save</MudButton>
            </MudToolBar>
        </EditForm>
    </MudContainer>
</MudDrawer>
@code {
    [Parameter, EditorRequired] public bool IsDrawerOpen { get; set; }
    [Parameter, EditorRequired] public EventCallback<bool> IsDrawerOpenChanged { get; set; }
    [Parameter, EditorRequired] public int Id { get; set; }
    [Parameter] public EventCallback<bool> OnSave { get; set; }

    [Inject] TodoItemService TodoItemService { get; set; }
    UpdateTodoItemStatusCommand _command = new();
    bool _isSaving;

    protected override void OnParametersSet()
    {
        _command = new();
        _command.Id = Id;
    }

    void Close()
    {
        IsDrawerOpen = false;
        StateHasChanged();
    }

    async Task Save()
    {
        _isSaving = true;

        var success = await TodoItemService.UpdateTodoItemStatusAsync(_command);

        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync(success);

        Close();

        _isSaving = false;
    }
}